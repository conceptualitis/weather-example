var React = require('react'),
    ForecastStore = require('app/stores/forecast'),
    StoreMixin = require('fluxible-app').StoreMixin,
    GetDayMixin = require('app/mixins/get-day'),
    ForecastNav = require('app/components/forecasts/nav.jsx'),
    loadForecast = require('app/actions/load-forecast'),
    Hour = require('app/components/forecasts/hour.jsx');

module.exports = React.createClass({
    mixins: [StoreMixin, GetDayMixin],

    statics: {
        storeListeners: {
            onChange: [ForecastStore]
        }
    },

    getInitialState: function () {
        var day = this.getDay();

        return {
            day: day,
            depart: parseInt(this.getQuery().depart, 10) || 8,
            return: parseInt(this.getQuery().return, 10) || 18,
            forecast: this.getStore(ForecastStore).getForecast(day)
        };
    },

    componentDidMount: function () {
        // poor man's caching
        if (this.state.forecast !== null) return;

        this.props.context.executeAction(loadForecast, {
            day: this.state.day
        });
    },

    // called when the day param changes, and other times
    componentDidUpdate: function () {
        var day = this.getDay();

        // see if it's a new day
        if (this.state.day == day) return;

        // if the store is unpopulated
        if (!this.getStore(ForecastStore).getForecast(day)) {
            this.props.context.executeAction(loadForecast, {
                day: day
            });
        }

        // set the day & forecast
        this.setState({
            day: day,
            forecast: this.getStore(ForecastStore).getForecast(day)
        });
    },

    onChange: function () {
        this.setState({
            forecast: this.getStore(ForecastStore).getForecast(this.state.day)
        });
    },

    render: function () {
        var content = (this.state.forecast === null) ?
            (
                <p>Loading&hellip;</p>
            ) :
            (
                <main>
                    <ForecastNav day={ this.state.day } date={ this.state.forecast.currently.time } />
                    <form className='forecast' method='get' action={ '/forecasts/' + this.state.day }>
                        <Hour
                            forecast={ this.state.forecast.hourly.data }
                            defaultHour={ this.state.depart }
                            name='depart'
                            dawn={ this.state.forecast.daily.data[0].sunriseTime }
                            sunset={ this.state.forecast.daily.data[0].sunsetTime } />
                        <Hour
                            forecast={ this.state.forecast.hourly.data }
                            defaultHour={ this.state.return }
                            name='return'
                            dawn={ this.state.forecast.daily.data[0].sunriseTime }
                            sunset={ this.state.forecast.daily.data[0].sunsetTime }
                            right={ true } />
                        <input type='submit' value='Update forecast' className='updateButton' />
                    </form>
                </main>
            );

        return content;
    }
});
