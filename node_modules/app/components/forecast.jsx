var React = require('react'),
    moment = require('moment'),
    _ = require('lodash'),
    ForecastStore = require('app/stores/forecast'),
    TimePicker = require('app/components/time-picker'),
    StoreMixin = require('fluxible-app').StoreMixin;

module.exports = React.createClass({
    mixins: [StoreMixin],

    statics: {
        storeListeners: {
            onChange: [ForecastStore]
        }
    },

    getInitialState: function () {
        return {
            forecast: this.getStore(ForecastStore).getForecast()
        };
    },

    onChange: function () {
        this.setState({
            forecast: this.getStore(ForecastStore).getForecast()
        });
    },

    render: function () {
        // multiple the offest by negative one so the offest is correct for getTimezoneOffset
        var day = moment(this.state.forecast.currently.time * 1000).zone(this.state.forecast.offset * -1),
            now = moment().zone(this.state.forecast.offset * -1).date(),
            links = [],
            availableDays = [now - 1, now, now + 1];

        if (_.contains(availableDays, day.subtract(1, 'days').date())) {
            links.push(
                <li>
                    <a href={ '/forecasts?lat=' + this.state.forecast.latitude +
                        '&long=' + this.state.forecast.longitude +
                        '&time=' + day.unix() }>
                        { day.format('D') }
                    </a>
                </li>
            );
        }

        if (_.contains(availableDays, day.add(2, 'days').date())) {
            links.push(
                <li>
                    <a href={ '/forecasts?lat=' + this.state.forecast.latitude +
                        '&long=' + this.state.forecast.longitude +
                        '&time=' + day.unix() }>
                        { day.format('D') }
                    </a>
                </li>
            );
        }

        return (
            <div>
                <small>{ this.state.forecast.city }, { this.state.forecast.state }</small>
                <br />
                <small>({ this.state.forecast.latitude }, { this.state.forecast.longitude })</small>
                <br />
                <small>{ this.state.forecast.currently.time * 1000 }</small>
                <h1>
                    { day.subtract(1, 'days').format('MMM') }
                    <br />
                    { day.date() }
                </h1>
                <ul>
                    { links }
                </ul>
                <h2>Depature</h2>
                <TimePicker hour={ 7 } />
                <p>{ this.state.forecast.hourly.data[7].apparentTemperature }</p>
                <h2>Return</h2>
                <TimePicker hour={ 18 } />
                <p>{ this.state.forecast.hourly.data[18].apparentTemperature }</p>
            </div>
        );
    }
});
